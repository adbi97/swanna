name: Deploy Lambda and Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        mkdir -p package
        pip install -r application/requirements.txt -t package/
        cp application/aapl_ingestion.py package/
        cd package
        zip -r ../application/lambda_function.zip .

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform -chdir=infrastructure init \
        -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" \
        -backend-config="key=terraform.tfstate" \
        -backend-config="region=${{ env.AWS_REGION }}" \
        -backend-config="dynamodb_table=${{ env.DYNAMODB_TABLE_NAME }}" \
        -backend-config="encrypt=true"

    - name: Terraform Validate
      run: terraform -chdir=infrastructure validate

    - name: Terraform Plan
      run: |
        terraform -chdir=infrastructure plan \
          -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        terraform -chdir=infrastructure apply -auto-approve \
          -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

    - name: Upload Lambda Package to S3
      run: |
        aws s3 cp application/lambda_function.zip s3://${{ env.BUCKET_NAME }}/lambda_function.zip \
          --region ${{ env.AWS_REGION }}

    - name: Deploy Lambda Function
      run: |
        aws lambda update-function-code --function-name AlphaVantageIngestion \
          --s3-bucket ${{ env.BUCKET_NAME }} \
          --s3-key lambda_function.zip \
          --region ${{ env.AWS_REGION }}
